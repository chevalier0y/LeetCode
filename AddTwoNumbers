You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Hide Tags Linked List Math

##c#
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {

     public ListNode AddTwoNumbers(ListNode l1, ListNode l2)
        {
            if (l1 == null || l2 == null) return null;
            ListNode pointer_l1 = l1;
            ListNode pointer_l2 = l2;
            int x = (pointer_l1.val + pointer_l2.val) >= 10 ? 1 : 0;
            int y = (pointer_l1.val + pointer_l2.val) % 10;
            ListNode pointter_result = new ListNode(y);
            ListNode pointer_of_node = pointter_result;
            while (pointer_l1.next != null || pointer_l2.next != null)
            {
                y = 0;
                if (pointer_l1.next != null)
                {
                    pointer_l1 = pointer_l1.next;
                    y += pointer_l1.val;
                }
                if (pointer_l2.next != null)
                {
                    pointer_l2 = pointer_l2.next;
                    y += pointer_l2.val;
                }
                pointer_of_node.next = new ListNode((x + y) % 10);
                pointer_of_node = pointer_of_node.next;
                x = (x + y) >= 10 ? 1 : 0;
            }
            if(x == 1)
            {
                pointer_of_node.next = new ListNode(1);
            }
            return pointter_result;
        }
}

v2

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
 public class Solution
    {
        public ListNode AddTwoNumbers(ListNode l1, ListNode l2)
        {
            if (l1 == null || l2 == null)
            {
                if (l1 != null)
                {
                    return l1;
                }
                if (l2 != null)
                {
                    return l2;
                }
            }

            ListNode result = new ListNode(0);
            int carry = 0;
            ListNode pl1 = l1;
            ListNode pl2 = l2;
            ListNode presult = result;

            while (pl1 != null || pl2 != null || carry == 1)
            {
                int a = pl1 != null ? pl1.val : 0;
                int b = pl2 != null ? pl2.val : 0;
                int n = carry + a + b;
                presult.next = new ListNode(n % 10);
                carry = n > 9 ? 1 : 0;

                pl1 = pl1 != null ? pl1.next : null;
                pl2 = pl2 != null ? pl2.next : null;
                presult = presult.next;
            }
            return result.next;
        }
    }
