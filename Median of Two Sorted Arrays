public class Solution {
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1 == null || nums2 == null)
        {
            if(nums2 != null)
            {
                int len1 = nums2.Length;
                int mid1_1 = (len1-1)>>1;
                int mid2_1 = mid1_1 + (len1-1)&1;
                return (nums2[mid1_1]+nums2[mid2_1])/2.0;
            }
            if(nums1 != null)
            {
                int len2 = nums1.Length;
                int mid1_2 = (len2-1)>>1;
                int mid2_2 = mid1_2 + (len2-1)&1;
                return (nums1[mid1_2]+nums1[mid2_2])/2.0;
            }
            return 0.0;
        }
        int m = nums1.Length;
        int n = nums2.Length;
        int mid1 = (n+m-1)/2;
        int mid2 = mid1 + (n+m-1)&1;
        int [] num1;
        int [] num2;
        if(nums1[m-1] <= nums2[0] || nums1[0] >= nums2[n-1])
        {
            if(nums1[m-1]<= nums2[0])
            {
                num1 = nums1;
                num2 = nums2;
            }
            else
            {
                num1 = nums2;
                num2 = nums1;
            }
            int delta = mid1-(num1.Length-1);
            int last = num1.Length-1;
            if(delta > 0)
            {
                return mid2==mid1?(double)num2[delta-1]:(num2[delta-1]+num2[delta])/2.0;
            }
            if(delta == 0)
            {
                return mid2==mid1?(double)num1[last]:(num1[last]+num2[0])/2.0;
            }
            if(delta < 0)
            {
                return mid2==mid1?(double)num1[mid1]:(num1[mid1]+num1[mid2])/2.0;
            }
        }
        if(((nums1[0]<nums2[0])&&
            (nums2[0]<nums1[m-1])&&
            (nums1[m-1]<nums2[n-1]))||
            ((nums1[m-1]>nums2[n-1])&&
            (nums2[n-1]>nums1[0])&&
            (nums1[0]>nums2[0])))
        {
            if((nums1[0]<nums2[0])&&
            (nums2[0]<nums1[m-1])&&
            (nums1[m-1]<nums2[n-1]))
            {
                num1 = nums1;
                num2 = nums2;
            }
            else
            {
                num1 = nums2;
                num2 = nums1;
            }
            int last = num1.Length -1;
            //int num2FirstInnum1 = QuickSearchIndex(num1,num2[0]);
            if(mid1< QuickSearchIndex(num1,num2[0]))
            {
                return mid2==mid1?(double)num1[mid1]:(num1[mid1]+(num1[mid2]<num2[0]?num1[mid2]:num2[0]))/2.0;
            }
            //int num1LastInnum2 = QuickSearchIndex(num2,num1[last]);
            if(mid1>last+1+QuickSearchIndex(num2,num1[last]))
            {
                return mid2==mid1?(double)num2[mid1-last-1]:(num2[mid1-last-1]+num2[mid1-last])/2.0;
            }
            else
            {
                //重叠的部分
                return 0.0;
            }
        }
        if((nums1[0]<nums2[0]&&nums2[n-1]<nums1[m-1])||
            (nums1[0]>nums2[0]&&nums2[n-1]>nums2[m-1]))
        {
            if(nums1[0]<nums2[0])
            {
                num1 = nums1;
                num2 = nums2;
            }
            else
            {
                num1 = nums2;
                num2 = nums1;
            }
            if(mid1<QuickSearchIndex(num1,num2[0]))
            {
                return mid2==mid1?(double)num1[mid1]:(num1[mid1]+(num1[mid2]<num2[0]?num1[mid1]:num2[0]))/2.0;
            }
            int last = num2.Length - 1;
            if(mid1>QuickSearchIndex(num1,num2[last])+last+1)
            {
                return mid2==mid1?(double)num1[mid1-last-1]:(num1[mid1-last-1]+num1[mid1-last])/2.0;
            }
            else
            {
                //重叠部分
                return 0.0;
            }
        }
        return 0.0;
    }
    //Find x index,if x between (a,b) return a's index +1;
    public int QuickSearchIndex(int[] num,int x)
    {
        int mid1 = (num.Length-1)/2;
        return 0;
    }
  
}


public class Solution {
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        int i = 0;
        int j = 0;
        int k = 0;
        int m = nums1.Length;
        int n = nums2.Length;
        if(m == 0 && n ==0){return 0.0;}
        if(m == 0){SimplifyFindMedian(nums2,n);}
        if(n == 0){SimplifyFindMedian(nums1,m);}
        //now n+m must not less than 2
        int mid = (n+m-1)>>1;
        int mid2 = (m+n)%2==0?mid+1:mid;
        while(i+j < mid)
        {
            if(i<m && j<n)
            {
                if(nums1[i] == nums2[j])
                {
                    i++;
                    j++;
                    k=0;
                    continue;
                }
                if(nums1[i] > nums2[j])
                {
                    j++;
                    k=1;
                    continue;
                }
                if(nums1[i] < nums[j])
                {
                    i++;
                    k=2;
                    continue;
                }
            }
            if(i == m)
            {
                if((m+n)%2==1){return nums2[(m+n-1)>>1 - m];}
                return (nums2[(m+n-1)>>1-m]+nums2[(m+n-1)>>1-m+1])/2.0;
            }
            if(j == n)
            {
                if((m+n)%2==1){return nums1[(m+n-1)>>1 - n];}
                return (nums1[(m+n-1)>>1-n]+nums1[(m+n-1)>>1-n+1])/2.0;
            }
            if((m+n)%2==1)
            {
                if((i+j)==mid)
                {
                    if(k == 1){return nums2[j];}
                    return nums1[i];
                }
                if((i+j)>mid)
                {
                    
                }
            }
        }
    }
    //if nums1 or nums2 have Length==0
    public double SimplifyFindMedian(int[] num,int length)
    {
        if(length == 1){return (double)num[0];}
        if(length%2==0){return (num[(length-1)>>1]+num[(length-1)>>1 +1])/2.0;}
        return (double)num[(length-1)>>1];
    }
    
    //Find x index,if x between (a,b) return a's index +1;
    public int QuickSearchIndex(int[] num,int x)
    {
        int left = 0;
        int right = num.Length -1;
        while(left<right)
        {
            int mid = (left+right)>>1;
            if(x == num[mid])
            {
                return mid+1;
            }
            if(x > num[mid])
            {
                left = mid+1;
                continue;
            }
            if(x < num[mid])
            {
                right = mid-1;
                continue;
            }
        }
        return left+1;
    }
  
}
